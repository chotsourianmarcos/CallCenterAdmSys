{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\Usuario.DESKTOP-8URFH3T\\\\Desktop\\\\MidasFrontEnd\\\\MidasFrontEnd\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { HttpParams } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ClientsAPIService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n  }\n\n  readClients() {\n    return this.httpClient.get(environment.clients + \"/readAll\");\n  }\n\n  removeNullValuesFromQueryParams(params) {\n    const paramsKeysAux = params.keys();\n    paramsKeysAux.forEach(key => {\n      const value = params.get(key);\n\n      if (value === null || value === undefined || value === '') {\n        params['map'].delete(key);\n      }\n    });\n    return params;\n  }\n\n  readClientsByParameters(clientParams) {\n    let jsonParamsObject = JSON.parse(JSON.stringify(clientParams));\n    let httpParams = new HttpParams({\n      fromObject: jsonParamsObject\n    });\n    httpParams = this.removeNullValuesFromQueryParams(httpParams);\n    return this.httpClient.get(environment.clients + \"/readByParams\", {\n      params: httpParams\n    });\n  }\n\n  addClient(newClient) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      return _this.httpClient.post(environment.clients + \"/add\", newClient, {\n        observe: 'response'\n      }).subscribe({\n        next: data => data,\n        error: error => console.error('¡There was an error!', error)\n      });\n    })();\n  }\n\n  updateClient(updateClient) {\n    return this.httpClient.patch(environment.clients, updateClient, {\n      observe: 'response'\n    });\n  }\n\n}\n\nClientsAPIService.ɵfac = function ClientsAPIService_Factory(t) {\n  return new (t || ClientsAPIService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nClientsAPIService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ClientsAPIService,\n  factory: ClientsAPIService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/Usuario.DESKTOP-8URFH3T/Desktop/MidasFrontEnd/MidasFrontEnd/src/app/APIServices/ClientsAPI/clients-api.service.ts"],"names":["HttpParams","environment","i0","i1","ClientsAPIService","constructor","httpClient","readClients","get","clients","removeNullValuesFromQueryParams","params","paramsKeysAux","keys","forEach","key","value","undefined","delete","readClientsByParameters","clientParams","jsonParamsObject","JSON","parse","stringify","httpParams","fromObject","addClient","newClient","post","observe","subscribe","next","data","error","console","updateClient","patch","ɵfac","ClientsAPIService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,SAASA,UAAT,QAA2B,sBAA3B;AACA,SAASC,WAAT,QAA4B,8BAA5B;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,OAAO,MAAMC,iBAAN,CAAwB;AAC3BC,EAAAA,WAAW,CAACC,UAAD,EAAa;AACpB,SAAKA,UAAL,GAAkBA,UAAlB;AACH;;AACDC,EAAAA,WAAW,GAAG;AACV,WAAO,KAAKD,UAAL,CAAgBE,GAAhB,CAAoBP,WAAW,CAACQ,OAAZ,GAAsB,UAA1C,CAAP;AACH;;AACDC,EAAAA,+BAA+B,CAACC,MAAD,EAAS;AACpC,UAAMC,aAAa,GAAGD,MAAM,CAACE,IAAP,EAAtB;AACAD,IAAAA,aAAa,CAACE,OAAd,CAAuBC,GAAD,IAAS;AAC3B,YAAMC,KAAK,GAAGL,MAAM,CAACH,GAAP,CAAWO,GAAX,CAAd;;AACA,UAAIC,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAKC,SAA5B,IAAyCD,KAAK,KAAK,EAAvD,EAA2D;AACvDL,QAAAA,MAAM,CAAC,KAAD,CAAN,CAAcO,MAAd,CAAqBH,GAArB;AACH;AACJ,KALD;AAMA,WAAOJ,MAAP;AACH;;AACDQ,EAAAA,uBAAuB,CAACC,YAAD,EAAe;AAClC,QAAIC,gBAAgB,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeJ,YAAf,CAAX,CAAvB;AACA,QAAIK,UAAU,GAAG,IAAIzB,UAAJ,CAAe;AAAE0B,MAAAA,UAAU,EAAEL;AAAd,KAAf,CAAjB;AACAI,IAAAA,UAAU,GAAG,KAAKf,+BAAL,CAAqCe,UAArC,CAAb;AACA,WAAO,KAAKnB,UAAL,CAAgBE,GAAhB,CAAoBP,WAAW,CAACQ,OAAZ,GAAsB,eAA1C,EAA2D;AAAEE,MAAAA,MAAM,EAAEc;AAAV,KAA3D,CAAP;AACH;;AACKE,EAAAA,SAAS,CAACC,SAAD,EAAY;AAAA;;AAAA;AACvB,aAAO,KAAI,CAACtB,UAAL,CAAgBuB,IAAhB,CAAqB5B,WAAW,CAACQ,OAAZ,GAAsB,MAA3C,EAAmDmB,SAAnD,EAA8D;AAAEE,QAAAA,OAAO,EAAE;AAAX,OAA9D,EACFC,SADE,CACQ;AACXC,QAAAA,IAAI,EAAEC,IAAI,IAAIA,IADH;AAEXC,QAAAA,KAAK,EAAEA,KAAK,IAAIC,OAAO,CAACD,KAAR,CAAc,sBAAd,EAAsCA,KAAtC;AAFL,OADR,CAAP;AADuB;AAM1B;;AACDE,EAAAA,YAAY,CAACA,YAAD,EAAe;AACvB,WAAO,KAAK9B,UAAL,CAAgB+B,KAAhB,CAAsBpC,WAAW,CAACQ,OAAlC,EAA2C2B,YAA3C,EAAyD;AAAEN,MAAAA,OAAO,EAAE;AAAX,KAAzD,CAAP;AACH;;AAhC0B;;AAkC/B1B,iBAAiB,CAACkC,IAAlB,GAAyB,SAASC,yBAAT,CAAmCC,CAAnC,EAAsC;AAAE,SAAO,KAAKA,CAAC,IAAIpC,iBAAV,EAA6BF,EAAE,CAACuC,QAAH,CAAYtC,EAAE,CAACuC,UAAf,CAA7B,CAAP;AAAkE,CAAnI;;AACAtC,iBAAiB,CAACuC,KAAlB,GAA0B,aAAczC,EAAE,CAAC0C,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAEzC,iBAAT;AAA4B0C,EAAAA,OAAO,EAAE1C,iBAAiB,CAACkC,IAAvD;AAA6DS,EAAAA,UAAU,EAAE;AAAzE,CAAtB,CAAxC","sourcesContent":["import { HttpParams } from '@angular/common/http';\r\nimport { environment } from 'src/environments/environment';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nexport class ClientsAPIService {\r\n    constructor(httpClient) {\r\n        this.httpClient = httpClient;\r\n    }\r\n    readClients() {\r\n        return this.httpClient.get(environment.clients + \"/readAll\");\r\n    }\r\n    removeNullValuesFromQueryParams(params) {\r\n        const paramsKeysAux = params.keys();\r\n        paramsKeysAux.forEach((key) => {\r\n            const value = params.get(key);\r\n            if (value === null || value === undefined || value === '') {\r\n                params['map'].delete(key);\r\n            }\r\n        });\r\n        return params;\r\n    }\r\n    readClientsByParameters(clientParams) {\r\n        let jsonParamsObject = JSON.parse(JSON.stringify(clientParams));\r\n        let httpParams = new HttpParams({ fromObject: jsonParamsObject });\r\n        httpParams = this.removeNullValuesFromQueryParams(httpParams);\r\n        return this.httpClient.get(environment.clients + \"/readByParams\", { params: httpParams });\r\n    }\r\n    async addClient(newClient) {\r\n        return this.httpClient.post(environment.clients + \"/add\", newClient, { observe: 'response' })\r\n            .subscribe({\r\n            next: data => data,\r\n            error: error => console.error('¡There was an error!', error)\r\n        });\r\n    }\r\n    updateClient(updateClient) {\r\n        return this.httpClient.patch(environment.clients, updateClient, { observe: 'response' });\r\n    }\r\n}\r\nClientsAPIService.ɵfac = function ClientsAPIService_Factory(t) { return new (t || ClientsAPIService)(i0.ɵɵinject(i1.HttpClient)); };\r\nClientsAPIService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: ClientsAPIService, factory: ClientsAPIService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}